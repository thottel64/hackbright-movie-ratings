// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    password,
    email)
    values(
"thottel", "pword", "taylor.hottel@shipt.com"
) RETURNING username, password, email
`

func (q *Queries) CreateUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser)
	var i User
	err := row.Scan(&i.Username, &i.Password, &i.Email)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE users.username = "thottel"
RETURNING username, password, email
`

func (q *Queries) DeleteUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser)
	var i User
	err := row.Scan(&i.Username, &i.Password, &i.Email)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, password, email FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Username, &i.Password, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT username, password, email
from users
WHERE users.username = "thottel" LIMIT 1
`

func (q *Queries) SelectUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, selectUser)
	var i User
	err := row.Scan(&i.Username, &i.Password, &i.Email)
	return i, err
}
