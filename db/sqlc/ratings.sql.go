// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: ratings.sql

package db

import (
	"context"
)

const createRating = `-- name: CreateRating :one
INSERT INTO ratings(
                    score,
                    user_username,
                    movie_id

) values (
             10,
          "thottel",
          1
         ) RETURNING id, score, user_username, movie_id
`

func (q *Queries) CreateRating(ctx context.Context) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :one
DELETE from ratings where ratings.id = 1 RETURNING id, score, user_username, movie_id
`

func (q *Queries) DeleteRating(ctx context.Context) (Rating, error) {
	row := q.db.QueryRowContext(ctx, deleteRating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}

const getRating = `-- name: GetRating :one
SELECT id, score, user_username, movie_id FROM ratings
where ratings.movie_id = 1 LIMIT 1
`

func (q *Queries) GetRating(ctx context.Context) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}

const listRatingByMovie = `-- name: ListRatingByMovie :many
SELECT id, score, user_username, movie_id FROM ratings
where ratings.movie_id = 1
`

func (q *Queries) ListRatingByMovie(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatingByMovie)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.UserUsername,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsByUser = `-- name: ListRatingsByUser :many
SELECT id, score, user_username, movie_id FROM ratings WHERE ratings.user_username = "thottel"
`

func (q *Queries) ListRatingsByUser(ctx context.Context) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatingsByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.UserUsername,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :one
UPDATE ratings
SET ratings.score = 9
WHERE ratings.movie_id = 1
RETURNING id, score, user_username, movie_id
`

func (q *Queries) UpdateRating(ctx context.Context) (Rating, error) {
	row := q.db.QueryRowContext(ctx, updateRating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}
