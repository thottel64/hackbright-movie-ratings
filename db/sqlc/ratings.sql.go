// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: ratings.sql

package db

import (
	"context"
	"database/sql"
)

const createRating = `-- name: CreateRating :one
INSERT INTO
    ratings (score, movie_id, user_username)
VALUES
    ($1, $2, $3) RETURNING id, score, user_username, movie_id
`

type CreateRatingParams struct {
	Score        sql.NullInt32  `json:"score"`
	MovieID      sql.NullInt32  `json:"movie_id"`
	UserUsername sql.NullString `json:"user_username"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRowContext(ctx, createRating, arg.Score, arg.MovieID, arg.UserUsername)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM
    ratings
WHERE
        id = $1
`

func (q *Queries) DeleteRating(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRating, id)
	return err
}

const getRating = `-- name: GetRating :one
SELECT
    id, score, user_username, movie_id
FROM
    ratings
WHERE
        id = $1
    LIMIT
  1
`

func (q *Queries) GetRating(ctx context.Context, id int32) (Rating, error) {
	row := q.db.QueryRowContext(ctx, getRating, id)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.Score,
		&i.UserUsername,
		&i.MovieID,
	)
	return i, err
}

const listRatingsByMovie = `-- name: ListRatingsByMovie :many
SELECT
    id, score, user_username, movie_id
FROM
    ratings
WHERE
        movie_id = $1
ORDER BY
    created_at DESC
`

func (q *Queries) ListRatingsByMovie(ctx context.Context, movieID sql.NullInt32) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatingsByMovie, movieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.UserUsername,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRatingsByUser = `-- name: ListRatingsByUser :many
SELECT
    id, score, user_username, movie_id
FROM
    ratings
WHERE
        user_username = $1
ORDER BY
    created_at DESC
`

func (q *Queries) ListRatingsByUser(ctx context.Context, userUsername sql.NullString) ([]Rating, error) {
	rows, err := q.db.QueryContext(ctx, listRatingsByUser, userUsername)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Rating{}
	for rows.Next() {
		var i Rating
		if err := rows.Scan(
			&i.ID,
			&i.Score,
			&i.UserUsername,
			&i.MovieID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :exec
UPDATE
    ratings
SET
    score = $1
WHERE
        id = $2 RETURNING id, score, user_username, movie_id
`

type UpdateRatingParams struct {
	Score sql.NullInt32 `json:"score"`
	ID    int32         `json:"id"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.ExecContext(ctx, updateRating, arg.Score, arg.ID)
	return err
}
